import pandas as pd

import tkinter as tk

from tkinter import filedialog, messagebox, ttk

from openpyxl import Workbook

from openpyxl.utils.dataframe import dataframe_to_rows

from openpyxl.styles import Alignment, Font

import os



def process_master_csv(master_file_path, low_stock_threshold, selected_product_types, selected_brands, sort_by_amount):

    try:

        # Read the master CSV file

        master_df = pd.read_csv(master_file_path)



        # Filter by selected product types

        master_df = master_df[master_df['Product Type'].isin(selected_product_types)]



        # Filter by selected brands if any are selected

        if selected_brands:

            master_df = master_df[master_df['Brand'].isin(selected_brands)]



        # Filter for Front of House and Back of House

        front_of_house_df = master_df[master_df['Location'] == 'F.O.H. - RECREATIONAL PRODUCTS']

        back_of_house_df = master_df[master_df['Location'] == 'B.O.H. - RECREATIONAL PRODUCTS']



        # Process the data as previously done

        available_in_back = process_csv_files(front_of_house_df, back_of_house_df, low_stock_threshold)



        # Sort by amount if specified

        if sort_by_amount:

            available_in_back = available_in_back.sort_values(by='Available Front', ascending=(sort_by_amount == "Smallest"))



        return available_in_back

    except Exception as e:

        messagebox.showerror("Error", f"Error processing CSV file: {e}")

        return pd.DataFrame()



def process_csv_files(front_of_house_df, back_of_house_df, low_stock_threshold):

    try:

        # Convert 'Available' column to float

        front_of_house_df['Available'] = front_of_house_df['Available'].astype(float)

        back_of_house_df['Available'] = back_of_house_df['Available'].astype(float)



        # Aggregate front of house data by Product Name

        front_of_house_aggregated = front_of_house_df.groupby(['Brand', 'Product Name'])['Available'].sum().reset_index()



        # Aggregate back of house data by Product Name

        back_of_house_aggregated = back_of_house_df.groupby(['Brand', 'Product Name'])['Available'].sum().reset_index()



        # Merge front of house and back of house data with left join to include all items from back of house

        merged_data = pd.merge(back_of_house_aggregated, front_of_house_aggregated, on=['Brand', 'Product Name'], how='left', suffixes=('_back', '_front'))



        # Fill NaN values in front_of_house columns with 0

        merged_data['Available_front'] = merged_data['Available_front'].fillna(0)



        # Filter items based on the condition: low or zero stock in front of house but available in back of house

        available_in_back = merged_data[

            (merged_data['Available_front'] < low_stock_threshold) &

            (merged_data['Available_back'] > 0)

        ]



        # Rename columns for clarity

        available_in_back = available_in_back.rename(columns={'Available_front': 'Available Front', 'Available_back': 'Available Back'})



        # Reorder columns

        available_in_back = available_in_back[['Brand', 'Product Name', 'Available Front', 'Available Back']]



        return available_in_back

    except Exception as e:

        messagebox.showerror("Error", f"Error processing CSV files: {e}")

        return pd.DataFrame()



def select_file(entry):

    file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])

    entry.delete(0, tk.END)

    entry.insert(0, file_path)



def run_processing():

    master_file_path = master_entry.get()

    low_stock_threshold = threshold_entry.get()

    

    if not master_file_path or not low_stock_threshold:

        messagebox.showerror("Error", "Please select the master CSV file and set the low stock threshold.")

        return



    try:

        low_stock_threshold = float(low_stock_threshold)

    except ValueError:

        messagebox.showerror("Error", "Low stock threshold must be a number.")

        return



    selected_product_types = [product_type for product_type, var in product_type_vars.items() if var.get()]

    if not selected_product_types:

        messagebox.showerror("Error", "Please select at least one product type.")

        return



    selected_brands = [brand for brand, var in brand_vars.items() if var.get()]

    

    sort_by_amount = sort_var.get()

    

    try:

        # Process CSV files

        low_stock_items_df = process_master_csv(master_file_path, low_stock_threshold, selected_product_types, selected_brands, sort_by_amount)

        

        # Clear any existing content in the text widget

        report_text.delete(1.0, tk.END)

        

        # Convert DataFrame to a formatted string and display in the text widget

        report_text.insert(tk.END, format_dataframe(low_stock_items_df))

        

        # Save the report to a new Excel file with gridlines and autofit column widths

        excel_file = 'low_stock_report.xlsx'

        save_to_excel_with_autofit_and_gridlines(low_stock_items_df, excel_file)

        

        print(f"Report generated: {excel_file}")

        

        messagebox.showinfo("Success", f"Report generated successfully: {excel_file}")

    except Exception as e:

        messagebox.showerror("Error", f"An error occurred: {e}")



def save_to_excel_with_autofit_and_gridlines(df, filename):

    from openpyxl import Workbook

    from openpyxl.worksheet.page import PageMargins, PrintOptions



    wb = Workbook()

    ws = wb.active

    

    # Add a heading

    heading = ["What's Missing"]

    ws.append(heading)

    ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=df.shape[1])

    ws['A1'].font = Font(size=14, bold=True)

    ws['A1'].alignment = Alignment(horizontal='center', vertical='center')

    

    # Write the DataFrame to the worksheet

    for r in dataframe_to_rows(df, index=False, header=True):

        ws.append(r)

    

    # Set alignment to center for all cells

    alignment = Alignment(horizontal='center', vertical='center')

    for row in ws.iter_rows(min_row=2):

        for cell in row:

            cell.alignment = alignment

    

    # Auto-fit column widths, skipping the merged header cell

    for col in ws.iter_cols(min_row=2, max_col=ws.max_column):

        max_length = 0

        column = col[0].column_letter

        for cell in col:

            try:

                if len(str(cell.value)) > max_length:

                    max_length = len(cell.value)

            except:

                pass

        adjusted_width = (max_length + 2)

        ws.column_dimensions[column].width = adjusted_width

    

    # Enable gridlines and set print orientation to landscape

    ws.sheet_view.showGridLines = True

    ws.print_options = PrintOptions(horizontalCentered=True, verticalCentered=False, gridLines=True)

    ws.page_setup.orientation = 'landscape'

    

    # Set margins for better printing layout

    ws.page_margins = PageMargins(left=0.5, right=0.5, top=0.75, bottom=0.75, header=0.3, footer=0.3)

    

    # Save the Excel file

    wb.save(filename)



def print_excel():

    try:

        os.startfile('low_stock_report.xlsx', 'print')

        messagebox.showinfo("Success", "Excel file sent to printer successfully.")

    except Exception as e:

        messagebox.showerror("Error", f"An error occurred while printing: {e}")



def format_dataframe(df):

    # Convert DataFrame to a formatted string for display

    formatted_string = df.to_string(index=False)

    return formatted_string



def select_all_product_types():

    for var in product_type_vars.values():

        var.set(True)

    update_brand_checkbuttons()



def deselect_all_product_types():

    for var in product_type_vars.values():

        var.set(False)

    update_brand_checkbuttons()



def select_all_brands():

    for var in brand_vars.values():

        var.set(True)



def select_in_house():

    for brand, var in brand_vars.items():

        if brand in in_house:

         var.set(True)      



def deselect_all_brands():

    for var in brand_vars.values():

        var.set(False)



def update_brand_checkbuttons():

    selected_product_types = [product_type for product_type, var in product_type_vars.items() if var.get()]

    for brand, var in brand_vars.items():

        if selected_product_types:

            var.set(True)

        else:

            var.set(False)



def toggle_brand_menu():

    if brand_frame.winfo_ismapped():

        brand_frame.pack_forget()

    else:

        brand_frame.pack(fill="both", expand="yes")



def toggle_product_type_menu():

    if product_type_frame.winfo_ismapped():

        product_type_frame.pack_forget()

    else:

        product_type_frame.pack(fill="both", expand="yes")



# Setup GUI

root = tk.Tk()

root.title("What's Missing")



# Font configuration for the report text

text_font = ("Courier", 10)  # Fixed-width font



# Main Frame

main_frame = tk.Frame(root)

main_frame.pack(fill="both", expand="yes")



# Canvas and Scrollbar

canvas = tk.Canvas(main_frame)

scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)

canvas.configure(yscrollcommand=scrollbar.set)



# Scrollable Frame

scrollable_frame = tk.Frame(canvas)



scrollable_frame.bind(

    "<Configure>",

    lambda e: canvas.configure(

        scrollregion=canvas.bbox("all")

    )

)



canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")



# Scrollbar and Canvas Pack

scrollbar.pack(side="right", fill="y")

canvas.pack(side="left", fill="both", expand=True)



# Master CSV section

master_label = tk.Label(scrollable_frame, text="Select Valuation Report")

master_label.pack()

master_entry = tk.Entry(scrollable_frame, width=50)

master_entry.pack()

master_button = tk.Button(scrollable_frame, text="Browse", command=lambda: select_file(master_entry))

master_button.pack()



# Low stock threshold section

threshold_label = tk.Label(scrollable_frame, text="Set Low Stock Threshold")

threshold_label.pack()

threshold_entry = tk.Entry(scrollable_frame, width=50)

threshold_entry.pack()



# Product type selection

product_type_frame = tk.Frame(scrollable_frame, relief="sunken", borderwidth=1)

product_type_frame.pack(fill="both", expand="yes")



product_types = ["FLOWER", "EDIBLE", "PREROLL", "CARTRIDGE", "EXTRACT", "MERCH"]



product_type_vars = {product_type: tk.BooleanVar() for product_type in product_types}



product_type_label = tk.Label(product_type_frame, text="Select Product Types")

product_type_label.pack()

for product_type, var in product_type_vars.items():

    chk = tk.Checkbutton(product_type_frame, text=product_type, variable=var, command=update_brand_checkbuttons)

    chk.pack(anchor='w')



select_all_product_types_button = tk.Button(product_type_frame, text="Select All Product Types", command=select_all_product_types)

select_all_product_types_button.pack()

deselect_all_product_types_button = tk.Button(product_type_frame, text="Deselect All Product Types", command=deselect_all_product_types)

deselect_all_product_types_button.pack()



# Brand selection



in_house = ["UNCLE X","JUKEBOX","COPPERSTATE FARMS"]



brands = sorted(["LOST DUTCHMEN", "JUKEBOX", "JEETER", "CAKE", "ABSTRAKT", "COPPERSTATE FARMS", "SAUCE", "ALIEN LABS", 

          "UNCLE X", "KIVA", "BRIX", "WYLD",  "STIIIZY", "PURE", "GROW SCIENCES", "CANAMO", "SONORAN ROOTS", "BAKED BROS", 

          "CAMINO", "PREFERRED GARDENS", "MADE", "WIZARD TREES", "TRUMED", "SUBLIME", "WONDERBRETT", "VARZ", 

          "PRESIDENTIAL", "HUXTON", "NOIR", "SELECT OIL", "GOOD TIDE", "GREEN DAWG CULTIVATORS", "DRIP OILS & EXTRACTS", 

          "JUPITER", "HOUSE EXOTICS", "KUSHY PUNCH", "ACCESSORIES", "RR BROTHERS", "SOL FLOWER", "BLACK BAG", 

          "BARRIO CANNABIS", "POTENT PLANET", "PROJECT PACKS", "TIMELESS", "DUTCHIE", "AUNT ELLIE'S", "CANNA CONFECTIONS", 

          "MFUSED", "JOILO", "CONNECTED", "OGEEZ", "CLIPPER", "AZUL"])

brand_vars = {brand: tk.BooleanVar(value=True) for brand in brands}



brand_frame = tk.LabelFrame(scrollable_frame, text="Select Brands")

brand_frame.pack(fill="both", expand="yes")



# Collapsible menu for brands

brand_canvas = tk.Canvas(brand_frame)

brand_scrollbar = tk.Scrollbar(brand_frame, orient="vertical", command=brand_canvas.yview)

brand_inner_frame = tk.Frame(brand_canvas)



brand_inner_frame.bind(

    "<Configure>",

    lambda e: brand_canvas.configure(

        scrollregion=brand_canvas.bbox("all")

    )

)



brand_canvas.create_window((0, 0), window=brand_inner_frame, anchor="nw")

brand_canvas.configure(yscrollcommand=brand_scrollbar.set)



for brand, var in brand_vars.items():

    tk.Checkbutton(brand_inner_frame, text=brand, variable=var).pack(anchor='w')



brand_canvas.pack(side="left", fill="both", expand=True)

brand_scrollbar.pack(side="right", fill="y")



select_all_brands_button = tk.Button(brand_frame, text="Select All", command=select_all_brands)

select_all_brands_button.pack(side=tk.LEFT)



select_in_house_button = tk.Button(brand_frame, text="Select in house", command=select_in_house)

select_in_house_button.pack(side=tk.LEFT)



deselect_all_brands_button = tk.Button(brand_frame, text="Deselect All", command=deselect_all_brands)

deselect_all_brands_button.pack(side=tk.LEFT)



toggle_brand_menu_button = tk.Button(scrollable_frame, text="Toggle Brand Menu", command=toggle_brand_menu)

toggle_brand_menu_button.pack()



# Sort by amount section

sort_label = tk.Label(scrollable_frame, text="Sort By Amount Available")

sort_label.pack()

sort_var = tk.StringVar(value="None")

sort_none = tk.Radiobutton(scrollable_frame, text="None", variable=sort_var, value="None")

sort_none.pack()

sort_smallest = tk.Radiobutton(scrollable_frame, text="Smallest to Largest", variable=sort_var, value="Smallest")

sort_smallest.pack()

sort_largest = tk.Radiobutton(scrollable_frame, text="Largest to Smallest", variable=sort_var, value="Largest")

sort_largest.pack()



# Generate Report button

generate_button = tk.Button(scrollable_frame, text="Generate Report", command=run_processing)

generate_button.pack()



# Print Excel button

print_button = tk.Button(scrollable_frame, text="Print", command=print_excel)

print_button.pack()



# Scrollbar for the report text widget

report_scrollbar = tk.Scrollbar(scrollable_frame)

report_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)



# Text widget to display the report

report_text = tk.Text(scrollable_frame, height=20, width=120, wrap=tk.NONE, font=text_font, yscrollcommand=report_scrollbar.set, xscrollcommand=report_scrollbar.set)

report_text.pack(side=tk.RIGHT, padx=10, pady=10, fill=tk.BOTH, expand=True)



# Configure the scrollbar

report_scrollbar.config(command=report_text.yview)



root.mainloop()
